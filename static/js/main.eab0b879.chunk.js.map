{"version":3,"sources":["logo.svg","Utils/Events.js","Utils/mapRange.js","Components/Input.js","Components/Output.js","App.js","reportWebVitals.js","index.js"],"names":["on","eventType","handler","document","addEventListener","off","removeEventListener","mapRange","num","min_old","max_old","min_new","max_new","math","require","Input","props","inputRef","useRef","containerRef","canvasRef","useState","xmin","xmax","ymin","ymax","range","setRange","parser","parser2","x","y","position","setPosition","setFunction","gx","gy","grad","setGrad","level","setLevel","getPos","data","w","current","getBoundingClientRect","width","h","height","winput","hinput","xini","yini","convert","ow","oh","evaluate","point","eps","mag","sqrt","error","console","log","isNumeric","isNaN","dfx","dfy","contour","elevation","chunks","a","outputArr","pushto","element","push","dxy","abs","i","j","start","contour_r","subdivisions","end","maxDepth","func","getRandomPoint","getRand","min","max","Math","random","checkSquare","corners","numSamples","samples","evalSign","el","sign","prev","length","curPoint","curEnd","undefined","hit","className","onInput","e","Number","target","value","type","placeholder","ref","id","bounds","onDrag","event","CustomEvent","detail","dispatchEvent","trigger","toFixed","style","transform","zIndex","x1","y1","x2","y2","stroke","strokeWidth","margin","onClick","then","points","boxes","ctx","getContext","clearRect","box","pixStart","pixEnd","fillStyle","fillRect","drawBoxes","Output","outputRef","pixelPos","setPixelPos","setPostion","onInputChange","cw","ch","useEffect","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eab0b879.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/**\r\n * Adds a handler to a particular event\r\n * @param {string}} eventType Designates the type of event to handle\r\n * @param {function} handler Designates the handler function to handle that event\r\n */\r\n\r\n function on(eventType, handler) {\r\n    document.addEventListener(eventType, handler);\r\n}\r\n\r\n/**\r\n * Removes handler from event\r\n * @param {string} eventType Designates the type of event to handle\r\n * @param {function} handler The handler to that event\r\n */\r\nfunction off(eventType, handler) {\r\n    document.removeEventListener(eventType, handler);\r\n}\r\n\r\n/**\r\n * Adds handler that handles the event once then unsubs\r\n * @param {string} eventType Designates the type of event to handle\r\n * @param {function} handler The handler to that event\r\n */\r\nfunction once(eventType, handler) {\r\n    on(eventType, handleOnce);\r\n    function handleOnce(event) {\r\n        handler(event);\r\n        off(eventType, handleOnce);\r\n    }\r\n}\r\n\r\n/**\r\n * triggers event in the document scope\r\n * @param {string} eventType The type of event to fire\r\n * @param {any} data Any data that you want the handler to process from the source.\r\n */\r\nfunction trigger(eventType, data) {\r\n    const event = new CustomEvent(eventType, {detail:data});\r\n    document.dispatchEvent(event);\r\n}\r\n\r\nasync function triggerAsync(eventType, data) {\r\n    const event = new CustomEvent(eventType, {detail:data});\r\n    document.dispatchEvent(event);\r\n}\r\n\r\nexport {on, once, off, trigger, triggerAsync}","const mapRange = (num, min_old, max_old, min_new, max_new) => {\r\n    return (num - min_old) * (max_new - min_new) / (max_old - min_old) + min_new;\r\n}\r\n\r\nexport default mapRange;","import { getSuggestedQuery } from \"@testing-library/dom\";\r\nimport { abs, isNumeric } from \"mathjs\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Draggable from \"react-draggable\"\r\nimport \"../Styles/Input.css\"\r\nimport { on, trigger } from \"../Utils/Events\";\r\nimport mapRange from \"../Utils/mapRange\";\r\nconst math = require('mathjs');\r\n\r\nfunction Input(props) {\r\n\r\n    const inputRef = useRef(null);\r\n    const containerRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [range, setRange] = useState({ xmin: -1.0, xmax: 1.0, ymin: -1.0, ymax: 1.0 });\r\n    const [parser, setParser] = useState(math.parser());\r\n    const [parser2, setParser2] = useState(math.parser());\r\n    const [position, setPosition] = useState({ x: 0, y: 0 })\r\n    const [func, setFunction] = useState(\"\");\r\n    const [grad, setGrad] = useState({ gx: 0, gy: 0 });\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const onDrag = (e, data) => {\r\n        setPosition(getPos(data));\r\n        const output = evaluate(getPos(data));\r\n        trigger('input:evaluate', output);\r\n    }\r\n    const onXmin = (e) => {\r\n        setRange({ xmin: Number(e.target.value), xmax: range.xmax, ymin: range.ymin, ymax: range.ymax });\r\n    }\r\n    const onXmax = (e) => {\r\n        setRange({ xmin: range.xmin, xmax: Number(e.target.value), ymin: range.ymin, ymax: range.ymax });\r\n    }\r\n    const onYmin = (e) => {\r\n        setRange({ xmin: range.xmin, xmax: range.xmax, ymin: Number(e.target.value), ymax: range.ymax });\r\n    }\r\n    const onYmax = (e) => {\r\n        setRange({ xmin: range.xmin, xmax: range.xmax, ymin: range.ymin, ymax: Number(e.target.value) });\r\n    }\r\n    const onContourInput = (e) => {\r\n        setLevel(e.target.value);\r\n    }\r\n\r\n    const getPos = (data) => {\r\n        const w = containerRef.current.getBoundingClientRect().width;\r\n        const h = containerRef.current.getBoundingClientRect().height;\r\n        const winput = inputRef.current.getBoundingClientRect().width;\r\n        const hinput = inputRef.current.getBoundingClientRect().height;\r\n\r\n        const xini = data.x + winput / 2.0;\r\n        const yini = data.y + hinput / 2.0;\r\n        const xnorm = mapRange(xini, winput / 2, w - winput / 2, range.xmin, range.xmax);\r\n        const ynorm = mapRange(yini, hinput / 2, h - hinput / 2, range.ymax, range.ymin);\r\n        return { x: xnorm, y: ynorm };\r\n    }\r\n\r\n    const convert = (data) => {\r\n        const cw = 400;\r\n        const ch = 400;\r\n        const ow = inputRef.current.getBoundingClientRect().width;\r\n        const oh = inputRef.current.getBoundingClientRect().height;\r\n\r\n        const xini = mapRange(data.x, range.xmin, range.xmax, ow / 2, cw - ow / 2);\r\n        const yini = mapRange(data.y, range.ymax, range.ymin, oh / 2, ch - oh / 2);\r\n        const x = xini\r\n        const y = yini\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    const evaluate = (point) => {\r\n        let x = 0;\r\n        let y = 0;\r\n        let gx = 0;\r\n        let gy = 0;\r\n        const eps = 0.001;\r\n        try {\r\n            x = parser.evaluate(`f(${point.x},${point.y})`);\r\n\r\n            gx = parser.evaluate(`f(${point.x},${point.y})`) - parser.evaluate(`f(${point.x + eps},${point.y})`);\r\n            gx /= -eps;\r\n            gy = parser.evaluate(`f(${point.x},${point.y})`) - parser.evaluate(`f(${point.x},${point.y + eps})`);\r\n            gy /= -eps;\r\n\r\n            const mag = math.sqrt(gx * gx + gy * gy);\r\n            gx /= mag;\r\n            gy /= mag;\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        if (!isNumeric(x) || isNaN(x)) {\r\n            x = 0;\r\n            y = 10;\r\n        }\r\n        setGrad({ gx: gx, gy: gy });\r\n        return { x: y, y: x, dfx: gx, dfy: gy };\r\n    }\r\n\r\n    const onFunctionTextInput = (e) => {\r\n        try {\r\n            parser.evaluate('f(x, y) = ' + e.target.value);\r\n            parser2.evaluate('f(x, y) = ' + e.target.value);\r\n            setFunction(e.target.value);\r\n        } catch (error) {\r\n            parser.evaluate('f(x, y) = 0');\r\n            parser2.evaluate('f(x, y) = 0');\r\n            setFunction('0')\r\n            console.log(\"invalid input\")\r\n        }\r\n    }\r\n\r\n    const drawBoxes = (boxes) => {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        ctx.clearRect(0, 0, 400, 400);\r\n        for (const box of boxes) {\r\n            const pixStart = convert(box.start);\r\n            const pixEnd = convert(box.end);\r\n            ctx.fillStyle = \"#000000\";\r\n            ctx.fillRect(pixStart.x, pixStart.y, pixEnd.x - pixStart.x, pixEnd.y - pixStart.y);\r\n        }\r\n    }\r\n\r\n    const contour = async (elevation, chunks) => {\r\n        let outputArr = [];\r\n        const pushto = (element) => {\r\n            outputArr.push(element);\r\n        }\r\n\r\n        const dxy = { x: math.abs(range.xmax - range.xmin / chunks), y: math.abs(range.ymax - range.ymin / chunks) };\r\n\r\n        for (let i = 0; i < chunks; i++) {\r\n            for (let j = 0; j < chunks; j++) {\r\n                const start = { x: range.xmin + i * dxy.x, y: range.ymax - j * dxy.y };\r\n                const end = { x: start.x + dxy.x, y: start.y - dxy.y };\r\n                contour_r(elevation, 2, start, end, 8, pushto);\r\n            }\r\n        }\r\n        return outputArr;\r\n    }\r\n\r\n    const contour_r = async (elevation, subdivisions, start, end, maxDepth, func) => {\r\n\r\n        const getRandomPoint = (start, end) => {\r\n            const getRand = (min, max) => {\r\n                return Math.random() * (max - min) + min;\r\n            }\r\n            return { x: getRand(start.x, end.x), y: getRand(start.y, end.y) };\r\n        }\r\n\r\n        const checkSquare = (corners, elevation, numSamples) => {\r\n            let m = 0;\r\n            let samples = []\r\n            for (let i = 0; i < numSamples; i++) {\r\n                samples.push(getRandomPoint(corners[0], corners[3]));\r\n            }\r\n\r\n            const evalSign = (point, el) => {\r\n                try {\r\n                    return math.sign(parser.evaluate(`f(${point.x},${point.y})`) - el);\r\n                } catch (error) {\r\n                    console.log(error)\r\n                    return false\r\n                }\r\n            }\r\n\r\n            samples.push(corners[0]);\r\n            samples.push(corners[1]);\r\n            samples.push(corners[2]);\r\n            samples.push(corners[3]);\r\n\r\n            // check all the samples\r\n            let sign = evalSign(samples[0], elevation);\r\n            let prev = sign;\r\n            for (let i = 0; i < samples.length; i++) {\r\n                try {\r\n                    sign = evalSign(samples[i], elevation);\r\n                    if (prev !== sign) {\r\n                        return true;\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        const dxy = { x: math.abs((end.x - start.x) / subdivisions), y: math.abs((start.y - end.y) / subdivisions) };\r\n\r\n        for (let i = 0; i < subdivisions; i++) {\r\n            for (let j = 0; j < subdivisions; j++) {\r\n\r\n                let curPoint = { x: start.x + i * dxy.x, y: start.y - j * dxy.y };\r\n                let curEnd = { x: curPoint.x + dxy.x, y: curPoint.y - dxy.y };\r\n                const corners = [\r\n                    { x: curPoint.x, y: curPoint.y },\r\n                    { x: curPoint.x, y: curPoint.y - dxy.y },\r\n                    { x: curPoint.x + dxy.x, y: curPoint.y },\r\n                    { x: curPoint.x + dxy.x, y: curPoint.y - dxy.y },\r\n                ];\r\n                const hit = checkSquare(corners, elevation, 5*maxDepth);\r\n\r\n                if (hit === undefined) {\r\n                    return;\r\n                }\r\n\r\n                if (hit) {\r\n                    if (maxDepth === 0) {\r\n                        // push start and end to output\r\n                        func({ start: start, end: end });\r\n                        break;\r\n                    }\r\n                    contour_r(elevation, subdivisions, curPoint, curEnd, maxDepth - 1, func);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <input className=\"input-bounds\" onInput={onYmax} type=\"number\" placeholder={1}></input>\r\n                <div className=\"flex-row\">\r\n                    <input className=\"input-bounds\" onInput={onXmin} type=\"number\" placeholder={-1}></input>\r\n                    <div ref={containerRef} className=\"input-container\">\r\n                        <canvas ref={canvasRef} width={400} height={400} id=\"canvas\" className=\"canvas\"></canvas>\r\n                        <Draggable bounds=\"parent\" onDrag={onDrag}>\r\n                            <div ref={inputRef} className=\"input-draggable\">\r\n                                <div className=\"position-label\">({position.x.toFixed(2)}, {position.y.toFixed(2)})</div>\r\n                                <svg style={{ position: \"absolute\", transform: \"translate(-50px,-40px)\", zIndex: \"20\" }} height=\"200px\" width=\"100px\">\r\n                                    <line x1={50 + grad.gx * 10} y1={50 + -grad.gy * 10} x2={50 + grad.gx * 30} y2={50 + -grad.gy * 30} style={{ stroke: \"rgb(255,0,0)\", strokeWidth: 2 }} />\r\n                                </svg>\r\n                            </div>\r\n                        </Draggable>\r\n                    </div>\r\n                    <input className=\"input-bounds\" onInput={onXmax} type=\"number\" placeholder={1}></input>\r\n                </div>\r\n                <input className=\"input-bounds\" onInput={onYmin} type=\"number\" placeholder={-1}></input>\r\n\r\n            </div>\r\n            <div className=\"function\">\r\n                <label>f(x, y) =</label>\r\n                <input onInput={onFunctionTextInput} type=\"text\"></input>\r\n                <div>\r\n                    <button style={{ margin: \"10px\" }} onClick={() => { contour(level, 2).then((points) => { drawBoxes(points) }) }}>Contour</button>\r\n                    <input className=\"input-bounds\" type=\"number\" onInput={onContourInput} value={level}></input>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;","import { useEffect, useState } from \"react\"\r\nimport Draggable from \"react-draggable\"\r\nimport \"../Styles/Output.css\"\r\nimport { off, on } from \"../Utils/Events\"\r\nimport { useRef } from \"react\"\r\nimport mapRange from \"../Utils/mapRange\";\r\nimport math, { abs, exp, pow } from \"mathjs\";\r\n\r\nfunction Output(props) {\r\n\r\n    const outputRef = useRef(null);\r\n    const containerRef = useRef(null);\r\n    const [range, setRange] = useState({ xmin: -1.0, xmax: 1.0, ymin: -1.0, ymax: 1.0 });\r\n    const [pixelPos, setPixelPos] = useState({ x: 10, y: 10 });\r\n    const [position, setPostion] = useState({ x: 0, y: 0 });\r\n\r\n    const inRange = (position) => {\r\n        if(position.x < range.xmin || position.x > range.xmax || position.y < range.ymin || position.y > range.ymax) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const fadeFactor = (position, power) => {\r\n\r\n        let opacity = 1;\r\n        if (!inRange(position)) {\r\n            if(position.y > range.ymax) {\r\n                opacity = pow(power, range.ymax - position.y).toFixed(2);\r\n            }\r\n            else if(position.y < range.ymax) {\r\n                opacity = pow(power, position.y - range.ymin).toFixed(2);\r\n            }\r\n        }\r\n\r\n        return opacity;\r\n    }\r\n\r\n    const convert = (data) => {\r\n        const cw = containerRef.current.getBoundingClientRect().width;\r\n        const ch = containerRef.current.getBoundingClientRect().height;\r\n        const ow = outputRef.current.getBoundingClientRect().width;\r\n        const oh = outputRef.current.getBoundingClientRect().height;\r\n\r\n        const xini = mapRange(data.x, range.xmin, range.xmax, ow / 2, cw - ow / 2);\r\n        const yini = mapRange(data.y, range.ymax, range.ymin, oh / 2, ch - oh / 2);\r\n        const x = xini - ow / 2;\r\n        const y = yini - oh / 2;\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    const onInputChange = (e) => {\r\n        setPixelPos(convert(e.detail));\r\n        setPostion(e.detail);\r\n    }\r\n\r\n    useEffect(() => {\r\n        on('input:evaluate', onInputChange);\r\n        return () => off('input:evaluate', onInputChange);\r\n    }, [range])\r\n\r\n    const onXmin = (e) => {\r\n        setRange({ xmin: Number(e.target.value), xmax: range.xmax, ymin: range.ymin, ymax: range.ymax });\r\n    }\r\n    const onXmax = (e) => {\r\n        setRange({ xmin: range.xmin, xmax: Number(e.target.value), ymin: range.ymin, ymax: range.ymax });\r\n    }\r\n    const onYmin = (e) => {\r\n        setRange({ xmin: range.xmin, xmax: range.xmax, ymin: Number(e.target.value), ymax: range.ymax });\r\n    }\r\n    const onYmax = (e) => {\r\n        setRange({ xmin: range.xmin, xmax: range.xmax, ymin: range.ymin, ymax: Number(e.target.value) });\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex-col\">\r\n            <input className=\"input-bounds\" onInput={onYmax} type=\"number\" placeholder={1}></input>\r\n            <div ref={containerRef} className=\"output-container\">\r\n                <Draggable bounds=\"parent\" position={pixelPos}>\r\n                    <div ref={outputRef} className=\"output-draggable\">\r\n                        <div className=\"position-label\">({position.y.toFixed(2)})</div>\r\n                    </div>\r\n                </Draggable>\r\n            </div>\r\n            <input className=\"input-bounds\" onInput={onYmin} type=\"number\" placeholder={-1}></input>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Output;","import logo from './logo.svg';\nimport './App.css';\nimport Input from './Components/Input';\nimport Output from './Components/Output';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Input></Input>\n        <Output></Output>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}